/*
LGTEST.ZSC\

Ok, let's try something new.

Plan:
Hit an enemy with a limited-length beam (Zapper)
If the enemy already has charge, give it some more (Zaptracker)
If the enemy is uncharged, give the enemy a manager item (Zapmaster)
Give the enemy an amount of charge (Zaptracker)
Stun the enemy as long as it has charge (Zapmaster)
Play VFX as long as the enemy is stunned (ZapVFX)
Emit targeted projectiles as long as the enemy is stunned (ZapPulser)

*/ 
Class LGTest: FenrisWeapon {
	
	int vfxLayerId, shakeval;

	property vfxLayerId : vfxLayerId;
	property shakeval : shakeval;
	
	default {
		inventory.pickupMessage "TEST LIGHTING GUN";
		weapon.slotNumber 7;
		weapon.SelectionOrder 7000;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Obituary "zap zap splort";
		LGTest.vfxLayerId -8000;
		LGTest.shakeval 2;
		+WEAPON.NOAUTOFIRE;
	}
	
	states {
		Ready:
			LITE A 1 A_WeaponReady();
			Loop;
		
		Select:
			LITE A 1 A_Raise();
			Loop;
		
		Deselect:
			LITE A 1 A_Lower();
			Loop;
		
		Fire:
			LITE A 4 {
				A_WeaponReady(WRF_NOBOB | WRF_NOFIRE);
				A_PlaySound("weapons/lbmfire", 7);
				//A_PlaySound("weapons/lgun_chargeloop", CHAN_WEAPON | CHAN_NOSTOP, looping: true);
			}		
		FireLoop:
			TNT1 A 0 A_FireProjectile("Zapper", 0, 0);
			TTN1 A 0 A_RailAttack(0, 0, 0, "", "White", RGF_SILENT | RGF_NOPIERCING | RGF_FULLBRIGHT, 0, "", 0, 0, 750, 1, 0.2, 0.0, "None", -4);
			Goto FireVisuals;

		FireVisuals:
			LITE B 2 A_WeaponOffset(invoker.shakeval, 0, WOF_ADD | WOF_INTERPOLATE);
			LITE C 2 A_WeaponOffset(-invoker.shakeval, invoker.shakeval, WOF_ADD | WOF_INTERPOLATE);
			LITE B 2 A_WeaponOffset(invoker.shakeval, -invoker.shakeval, WOF_ADD | WOF_INTERPOLATE);
			LITE C 2 A_WeaponOffset(-invoker.shakeval, 0, WOF_ADD | WOF_INTERPOLATE);
			TNT1 A 0 A_Refire("AmmoCheck");
			Goto EndFire;
		
		AmmoCheck:
			TNT1 A 0 {
				A_TakeInventory("Cell", 1);
				if (countInv("Cell") < 1) {
					return ResolveState("Dryfire");
				}
				return ResolveState(Null);
			}
			//if no ammo do thing
			// alert???
			Goto FireLoop;
		
		Dryfire:
		EndFire:	
		Recharge:
			TNT1 A 0 {
				A_StopSound(CHAN_WEAPON);
				A_StopSound(7);
			}
			LITE A 50 A_PlaySound("weapons/lgun_rechargebeep", CHAN_6);
			Goto Ready;	
			
		Spawn:
			TLGL A -1;
			Stop;
	}
}

Class Zapper : FastProjectile {
	bool loggingEnabled;
	int maxLifetime;
	int currentLifetime;
	
	property loggingEnabled : loggingEnabled;
	property maxLifetime : maxLifetime;
	property currentLifetime : currentLifetime;
	
	default {
		Radius 4;
		Height 4;
		Speed 150;
		Damage 1;
		PROJECTILE;
		+FORCEPAIN;
		+HITTRACER; // sets the thing it hits to AAPTR_TRACER
		Zapper.loggingEnabled true;
		Zapper.maxLifetime 8;
		Zapper.currentLifetime 0;
	}
	
	States {
        Spawn:
            TNT1 A 1 {
				if (currentLifetime > maxLifetime) {
					if (loggingEnabled) {Console.printf("projectile lived for %i tics, fizzling", maxLifetime);}
					return ResolveState("Fizzle");
				}
				else {
					currentLifetime++;
					return ResolveState(Null); // need to have this in otherwise gzdoom complains
				}
			}
            Loop;
		
		Fizzle:
            TNT1 A 0;
			Stop;
		
		Death:			
			TNT1 A 0 {
				if (!tracer) {
					if (loggingEnabled) {Console.printf("Null tracer");}
					return ResolveState("JustImpact");
				}
				return ResolveState(null);
			}					
			TNT1 A 0 {
				if (tracer.health < 1) {
					if (loggingEnabled) {Console.printf("Tracer health < 1");}
					return ResolveState("JustImpact");
				}
				if (tracer.bBoss) {
					if (loggingEnabled) {Console.printf("Hit Boss");}
					return ResolveState("JustImpact");
				}
				if (CheckClass("ExplosiveBarrel", AAPTR_TRACER, TRUE)) {
					if (loggingEnabled) {Console.printf("Hit Barrel");}
					return ResolveState("JustImpact");
				}
				return ResolveState(null);
			}
			TNT1 A 0 { 
				if (CountInv("Zaptracker", AAPTR_TRACER) > 0) {
					return ResolveState("ExtendShock");
				}
				else {
					return ResolveState("GiveShock");
				}
				return ResolveState(null);
			}
			//TNT1 A 0 A_Warp(AAPTR_TRACER, 0,0,0, 0, WARPF_NOCHECKPOSITION, "GiveShock", 0.5);
			// I don't know why I had that in there
			Stop;
		
		ExtendShock:
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("Enemy charged, extending charge");}
			}
			//TNT1 A 0 A_GiveInventory("ChargeActivePowerup", 1, AAPTR_TRACER);
			//TNT1 A 0 tracer.GiveInventory("ChargeActivePowerup", 1);
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("but not really, this is a test");}
			}
			Stop;
		
		JustImpact:
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("just impacting");}
			}
			Stop;
		
		GiveShock:
			/*
			TNT1 A 0 {
				if (loggingEnabled && A_SpawnItemEx("ShockEffectItem", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS)) {Console.printf("giving shock item");}
				if (loggingEnabled && A_SpawnItemEx("ShockEffectVFX", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS)) {Console.printf("giving shock vfx");}
				if (loggingEnabled && A_SpawnItemEx("ShockEffectPulser", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS)) {Console.printf("giving shock pulser");}
				return ResolveState(null);
			}
			*/
			TNT1 A 0 {
				if (loggingEnabled && A_SpawnItemEx("Zapmaster", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS)) {
					Console.printf("Spawning ZapMaster on target");
				}
				if (loggingEnabled && A_GiveInventory("Zaptracker", 1, AAPTR_TRACER)) {
					Console.printf("Giving Zaptracker to target");
				}
				if (loggingEnabled && A_SpawnItemEx("ZapVFX", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS)) {
					Console.printf("Spawning ZapVFX on target");
				}
				return ResolveState(null);
			}
			Stop;
	}
}

Class Zaptracker : Inventory {
	default {
		Inventory.MaxAmount 0xFFFFFF;
		+INVENTORY.IGNORESKILL;
	}
}

Class Zapmaster : Actor {
	bool loggingEnabled;
	int maxLifetime, currentLifetime, flashInterval, flashCount;
	
	property loggingEnabled : loggingEnabled;
	property maxLifetime : maxLifetime;
	property flashInterval : flashInterval;
	
	default {
		Radius 8;
		Height 8;
		+DONTGIB
		+NOINTERACTION
		+NOCLIP
		Zapmaster.loggingEnabled true;
		Zapmaster.maxLifetime 70;
		Zapmaster.flashInterval 3;
	}

	States {
		Spawn:
			TNT1 A 0 {
				flashCount = 0;
				currentLifetime = 0;
			}
			Goto MainLoop;

		MainLoop:
			TNT1 A 1 { // this state must take at least 1 tic to set the tracer's state correctly
				if (tracer) {
					tracer.setStateLabel("Pain");
					if (flashCount >= flashInterval) {
						tracer.A_SetTranslation("BlueLightning");
						flashCount = 0;
					}
					else {
						tracer.A_SetTranslation("Base");
						flashCount++;
					}
					return ResolveState(Null);
				}
				else return ResolveState("NullTracer");
			}
			TNT1 A 0 {
				if (currentLifetime > maxLifetime) {
					if (loggingEnabled) {Console.printf("Zapmaster lifetime exceeded, destroying");}
					return ResolveState("Death");
				}
				else {
					currentLifetime++;
					return ResolveState("WarpCheck");
				}
			}
			Goto Death;
		
		WarpCheck:
			TNT1 A 0 A_Warp(AAPTR_TRACER, flags: WARPF_NOCHECKPOSITION, success_state: "MainLoop", heightoffset: 0.5);
			Goto Death;
			
		NullTracer:
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("Zapmaster has null tracer, destroying");}
			}
			Goto Death;
			
		Death:
			TNT1 A 1 { //needs to be at least 1 tic for the remove to work
				A_SetInventory("Zaptracker", 0, AAPTR_TRACER);
				tracer.A_SetTranslation("Base");
				if (loggingEnabled) {
					Console.printf("Removing Zaptracker from target");
				}
			}
			Stop;
	}
}


Class ZapVFX : Actor {
	bool loggingEnabled;
	property loggingEnabled : loggingEnabled;
	
	default {
	    Radius 8;
        Height 8;
        Scale 0.95;
        Alpha 0.85;
        RenderStyle "Add";
        +FORCEXYBILLBOARD;
		+DONTGIB;
		+NOINTERACTION;
		+NOCLIP;
		ZapVFX.loggingEnabled true;
	}
	
	States {
		Spawn:
			TNT1 A 0 {
				if (!tracer) {
					return ResolveState("NullTracer");
				}
				return ResolveState("Null");
			}
				
		MainLoop:
			TNT1 A 0 {
				if (!tracer) {
					return ResolveState("NullTracer");
				}
				if (CountInv("Zaptracker", AAPTR_TRACER) > 0) {
					A_PlaySound("weapons/lgun_elecloop", CHAN_7, looping: true);
					return ResolveState("DoVFX");
				}
				else {
					return ResolveState("Expire");
				}
			}
			
		DoVFX:
			LTXS ABCDEF 2 BRIGHT;
			Goto WarpCheck;
		
		WarpCheck:
			TNT1 A 0 A_Warp(AAPTR_TRACER, flags: WARPF_NOCHECKPOSITION, success_state: "MainLoop", heightoffset: 0.5);

		Expire:
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("ZapVFX has no Zaptracker, destroying");}
			}
			LTXS ABCDE 1 Bright;
			LTXS F 1 Bright A_StopSound(CHAN_7);
			Stop;
				
		NullTracer:
			TNT1 A 0 {
				if (loggingEnabled) {Console.printf("ZapVFX has null tracer, destroying");}
			}
			Stop;
    }
}
//EOF
